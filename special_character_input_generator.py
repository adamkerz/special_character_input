#!python3.6
# -=- encoding: utf-8 -=-
from pathlib import Path


def define_bindings(a):
    # diaeresis or umlauts
    a('"A',              '√Ñ')
    a('"a',              '√§')
    a('"E',              '√ã')
    a('"e',              '√´')
    a('"I',              '√è')
    a('"i',              '√Ø')
    a('"O',              '√ñ')
    a('"o',              '√∂')
    a('"U',              '√ú')
    a('"u',              '√º')
    a('"Y',              '≈∏')
    a('"y',              '√ø')

    # acutes
    a("'A",              '√Å')
    a("'a",              '√°')
    a("'C",              'ƒÜ')
    a("'c",              'ƒá')
    a("'E",              '√â')
    a("'e",              '√©')
    a("'I",              '√ç')
    a("'i",              '√≠')
    a("'O",              '√ì')
    a("'o",              '√≥')
    a("'U",              '√ö')
    a("'u",              '√∫')
    a("'Y",              '√ù')
    a("'y",              '√Ω')

    # graves
    a("`A",              '√Ä')
    a("`a",              '√†')
    a("`E",              '√à')
    a("`e",              '√®')
    a("`I",              '√å')
    a("`i",              '√¨')
    a("`O",              '√í')
    a("`o",              '√≤')
    a("`U",              '√ô')
    a("`u",              '√π')

    # tildes
    a('~A',              '√É')
    a('~a',              '√£')
    a('~N',              '√ë')
    a('~n',              '√±')
    a('~O',              '√ï')
    a('~o',              '√µ')

    # circumflexes
    a('^A',              '√Ç')
    a('^a',              '√¢')
    a('^E',              '√ä')
    a('^e',              '√™')
    a('^I',              '√é')
    a('^i',              '√Æ')
    a('^O',              '√î')
    a('^o',              '√¥')
    a('^U',              '√õ')
    a('^u',              '√ª')

    # carons
    a('vC',              'ƒå')
    a('vc',              'ƒç')
    a('vS',              '≈†')
    a('vs',              '≈°')
    a('vZ',              '≈Ω')
    a('vz',              '≈æ')

    # macrons
    a('^-A',             'ƒÄ')
    a('^-a',             'ƒÅ')
    a('^-O',             '≈å')
    a('^-o',             '≈ç')

    # overrings
    a('oA',              '√Ö')
    a('oa',              '√•')

    # stroked characters
    a('-D',              'ƒê')
    a('-d',              'ƒë')

    # slashed characters
    a('/O',              '√ò')
    a('/o',              '√∏')

    # cedillas
    a('?C',              '√á')
    a('?c',              '√ß')
    a('?S',              '≈û')
    a('?s',              '≈ü')

    # sharp s
    a('ss',              '√ü')

    # combined characters
    a('AE',              '√Ü')
    a('ae',              '√¶')

    # misc letters
    a('alpha',           'Œ±')
    a('beta',            'Œ≤')
    a('micro',           '¬µ')
    a('ohm',             'Œ©')
    a('pi',              'œÄ')

    # currency symbols
    a('cent',            '¬¢')
    a('euro',            '‚Ç¨')
    a('gbp',             '¬£')
    a('czk',             'Kƒç')
    a('plz',             'z≈Ç')
    a('thb',             '‡∏ø')
    a('egp',             'E¬£')
    a('jpy',             '¬•')

    # standard emojis
    ':rofl:':'ü§£',

    # misc symbols
    # guillemets
    a('< ',              '‚Äπ')
    a('> ',              '‚Ä∫')
    a('<<',              '¬´')
    a('>>',              '¬ª')
    # quotes and double quotes
    a("l'",              '‚Äò')
    a("r'",              '‚Äô')
    a('l"',              '‚Äú')
    a('r"',              '‚Äù')
    # inverted punctuation
    a('? ',              '¬ø')
    a('! ',              '¬°')
    # typographic symbols
    a('section',         '¬ß')
    a('para',            '¬∂')
    a('...',             '‚Ä¶')
    # IP symbols
    a('copyright',       '¬©')
    a('registered',      '¬Æ')
    a('trademark',       '‚Ñ¢')
    # graphic symbols
    a('tick',            '‚úì')
    a('cross',           '‚úó')
    a('checkboxcross',   '‚òí')
    a('checkboxempty',   '‚òê')
    # maths symbols
    a('+-',              '¬±')
    a('*x',              '√ó')
    a('*.',              '¬∑') # aka interpunct
    a('//',              '√∑')
    a('<=',              '‚â§')
    a('>=',              '‚â•')
    a('degrees',         '¬∞')
    a('superscript1',    '¬π')
    a('squared',         '¬≤')
    a('cubed',           '¬≥')

    # whitespace
    # word joiner (a zero width character)
    a(' ',               '‚Å†')

    # special help link
    a('help',            'HELP')



# create a binding dict
bindings={}
def add_binding(binding,string):
    if binding in bindings: raise Exception(f'duplicate: {binding}={string} and {bindings[binding]}')
    bindings[binding]=string
define_bindings(add_binding)


# build tree of characters
bm={}
for k,v in bindings.items():
    m=bm
    for l in k:
        if l in m:
            m=m[l]
        else:
            m[l]={}
            m=m[l]
    m['']=v


# build help text (in cpython3.6 dicts keep insertion order, in py3.7+ it's a language feature, so help text will be generated in insertion order)
help_text=[]
last=''
for k,v in bindings.items():
    help_text.append(f'{k}={v}\t')
help_text=''.join(help_text)


# output the AHK code
with Path(r'specialCharacterInputBinding.ahk').open('w',encoding='utf-8') as fout:
    fout.write('^\::\n')

    # recursively output conditionals
    def output(prefix,m,depth):
        first=True
        indent='\t'*depth
        else_str=''
        for k,v in sorted(m.items()):
            if k=='':
                if prefix=='help':
                    fout.write(f'{indent}GoSub SpecialCharacterInput_Help\n')
                else:
                    fout.write(f'{indent}Send, {v}\n')
                if len(m)>1:
                    raise Exception(f'overlap: termination of {v} is continued by {m}')
            else:
                escaped_k=k.replace('"','""').replace('`','``').replace('\n','`n')
                if first: fout.write('{}Input, key, L1\n'.format(indent))
                fout.write('{}{}If(key == "{}"){{\n'.format(indent,else_str,escaped_k))
                output(prefix+k,v,depth+1)
                fout.write('{}}}\n'.format(indent))
                first=False
                else_str='Else '
    output('',bm,1)
    fout.write('Return\n')

    # write the help function that pops up a message box when C-\ help is input
    fout.write(f'''
    SpecialCharacterInput_Help:
        Msgbox, 64, SpecialCharacterInput, {help_text}
    Return
    ''')


# and copy to my AHK script dir
AHK_SCRIPT_DIR=Path(r'D:\pe\apps-core\utils\AutoHotkey')
if AHK_SCRIPT_DIR.is_dir():
    # use copy2 to update mod time for pe git repo
    from shutil import copy2
    copy2('specialCharacterInputBinding.ahk',AHK_SCRIPT_DIR)
